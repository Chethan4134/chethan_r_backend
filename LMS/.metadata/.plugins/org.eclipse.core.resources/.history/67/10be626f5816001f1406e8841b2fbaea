package com.excel.learning_management_system.service.implementaion;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.excel.learning_management_system.constant.EmployeeConstatnt;
import com.excel.learning_management_system.dto.EmployeePrimaryInfoDto;
import com.excel.learning_management_system.dto.EmployeeSecondaryInfoDto;
import com.excel.learning_management_system.entity.EmployeeEducationInfo;
import com.excel.learning_management_system.entity.EmployeePrimaryInfo;
import com.excel.learning_management_system.entity.EmployeeSecondaryInfo;
import com.excel.learning_management_system.exception.EmployeeException;
import com.excel.learning_management_system.listdto.EmployeeEducationListDto;
import com.excel.learning_management_system.repository.EmployeeRepository;
import com.excel.learning_management_system.service.EmployeeInfoService;
import com.excel.learning_management_system.util.EmployeeUtil;

@Service

public class EmployeeInfoServiceImpl implements EmployeeInfoService {
	
	@Autowired
	private EmployeeRepository employeeRepository;
	
	@Override
	public Integer savePrimaryInfo(EmployeePrimaryInfoDto dto) {
		if(!employeeRepository.findById(dto.getId()).isPresent()) {
			EmployeePrimaryInfo employeePrimaryInfo = EmployeeUtil.dtoToEntity(dto);
			EmployeePrimaryInfo employeeSave = employeeRepository.save(employeePrimaryInfo);
			return employeeSave.getId();
		}
		else {
		 throw new EmployeeException(EmployeeConstatnt.ID_ALREADY_EXIST);
		}
	
		
		
	}

	

	@Override
	public String saveSecondaryInfo(EmployeeSecondaryInfoDto dto) {
		Optional<EmployeePrimaryInfo> optional = employeeRepository.findByEmployeeId(dto.getEmployeeId());
		if (optional.isPresent()) {
			EmployeePrimaryInfo employeePrimaryInfo = optional.get();
			if (employeePrimaryInfo.getSecondary() == null) {
				EmployeeSecondaryInfo employeeSecondaryInfo = EmployeeUtil.dtoToEntity(dto);
				
				employeePrimaryInfo.setSecondary(employeeSecondaryInfo);
				employeeSecondaryInfo.setEmployee(employeePrimaryInfo);
				
				return employeeRepository.save(employeePrimaryInfo).getEmployeeId();
			}else {
				EmployeeSecondaryInfo secondaryInfo = employeePrimaryInfo.getSecondary();
				
				secondaryInfo.setMaritalStatus(dto.getMaritalStatus());
				return employeeRepository.save(employeePrimaryInfo).getEmployeeId();
			}
		}else {
			throw new EmployeeException(EmployeeConstatnt.ID_IS_NOT_EXIST);
		}
		
	}



	@Override
	public String addEducationDetails(EmployeeEducationListDto dto) {
	
		Optional<EmployeePrimaryInfo> optional = employeeRepository.findByEmployeeId(dto.getEmployeeId());
		if (optional.isPresent()) {
			
			EmployeePrimaryInfo employeePrimaryInfo = optional.get();
			List<EmployeeEducationInfo> educationInfos = dto.getEmployeeList().stream()
					.map(e -> EmployeeEducationInfo.builder()
							.educationId(e.getEducationId())
							.educationType(e.getEducationType())
							.yearOfPassing(e.getYearOfPassing())
							.percentage(e.getPercentage())
							.univercityName(e.getUnivercityName())
							.instituteName(e.getInstituteName())
							.specialization(e.getSpecialization())
							.state(e.getState())
							.build())
					.toList();
		
			educationInfos.stream().forEach(e -> e.setEmployee(employeePrimaryInfo));
			employeePrimaryInfo.setEmployeeEducation(educationInfos);
			employeeRepository.save(employeePrimaryInfo);
			
			
			
			return employeePrimaryInfo.getEmployeeId();
		}
		throw new EmployeeException(EmployeeConstatnt.ID_IS_NOT_EXIST);
	}

}


//public String addEducations(EducationListDto dto) {
//	Optional<EmployeePrimaryInfo> optional = employeeRepository.findByEmployeeId(dto.getEmployeeId());
//	if (optional.isPresent()) {
//		EmployeePrimaryInfo employee = optional.get();
//		
//			List<EmployeeEducationDetails> educations = dto.getEducations().stream()
//					.map(edu -> EmployeeEducationDetails.builder()
//							.educationType(edu.getEducationType())
//							.yearOfPass(edu.getYearOfPass())
//							.percentage(edu.getPercentage())
//							.universityName(edu.getUniversityName())
//							.instituteName(edu.getInstituteName())
//							.specialization(edu.getSpecialization())
//							.state(edu.getState())
//							.build()).toList();
//			
//			if (employee.getEmployeeEducationDetails() != null) {
//				employee.getEmployeeEducationDetails().stream().forEach(empoyeeEducationRepository::delete);
//			}
//			employee.setEmployeeEducationDetails(educations);
//			educations.stream().forEach(edu -> edu.setEmployee(employee));
//			
//			return employeeRepository.save(employee).getEmployeeId();
//		
//	}
//	return null;
//}

